openapi: 3.0.2
info:
  title: PoemBlog
  version: 1.0.0
paths:
  /users:
    post:
      requestBody:
        description: User email and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
            examples:
              user input:
                value:
                  email: bob@gmail.com
                  password: mikk12345
        required: true
      tags:
        - Users
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                user created:
                  value:
                    message: User Created
                    token: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzODdkZTU4YjhjYTk5NGRjZDhmOWRhMiIsImlhdCI6MTY2OTg0ODY2NCwiZXhwIjoxNjcwMzY3MDY0fQ.b7JLmrEx9sxC3eMjjVkk9nSsM8yHY6gHfLBlgsnzu08
                    data:
                      user:
                        email: bob@gmail.com
                        password: >-
                          $2a$12$MkyngiJJdDRz8u4vTCTH6eomToPGljGDxQQQOB.P4PMUz/OjzF9Mm
                        _id: 6387de58b8ca994dcd8f9da2
                        __v: 0
          description: user created
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                user already exists:
                  value:
                    error: User already exists
          description: User with this email already exists
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Inputs not acceptable:
                  value:
                    error: Email or password not acceptable
          description: User inputs are not acceptable
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Internal error:
                  value:
                    error: error
          description: Internal error
  /sessions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
            examples:
              Login input:
                value:
                  email: bob@gmail.com
                  password: mikk12345
        required: true
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Logged in user:
                  value:
                    status: success
                    token: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzODdiYTVkNTBkMThkNGY2ZjdiZTM2ZiIsImlhdCI6MTY2OTg0ODYwNSwiZXhwIjoxNjcwMzY3MDA1fQ.OjzH2d16LfwmcdN_Cd-SdBlVI4DpQezEkJk9RiNE5K0
                    data:
                      user:
                        _id: 6387ba5d50d18d4f6f7be36f
                        email: bob@gmail.com
                        __v: 0
          description: User logged in
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Invalid user credentials:
                  value:
                    error: Please provide email and password!
          description: Input fields empty
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Wrong email or password:
                  value:
                    error: Incorrect email or password
          description: Unauthorized
  /poems:
    get:
      tags:
        - Poems
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                poem:
                  value:
                    status: success
                    data:
                      poems:
                        createdAt: '2022-11-29T19:47:06.659Z'
                        _id: 638661e6553e8458717a9999
                        userId: 6366eec1385c79a791f80ee9
                        title: Some poem randome title
                        text: some pome text
          description: List of poems returned
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                Not found:
                  value:
                    status: fail
                    error: poems not found
          description: Poems not found
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/poem'
            examples:
              User input:
                value:
                  userId: 6387de58b8ca994dcd8f9da2
                  title: Some poem title
                  text: >-
                    Lorem Ipsum is simply dummy text of the printing and typesetting
                    industry. Lorem Ipsum has been the industry's standard dummy text ever
                    since the 1500s
        required: true
      tags:
        - Poems
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                When poem is posted:
                  value:
                    message: Poem created
                    data:
                      poem:
                        userId: 6387de58b8ca994dcd8f9da2
                        title: Some poem title
                        text: >-
                          Lorem Ipsum is simply dummy text of the printing and
                          typesetting industry. Lorem Ipsum has been the industry's
                          standard dummy text ever since the 1500s
                        createdAt: '2022-12-01T10:35:56.263Z'
                        _id: 6388843802ec5a22b2912929
                        __v: 0
          description: Poem created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                When user unauthorized:
                  value:
                    error: No authorization token not found
          description: Unautorized
        '411':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                When input fields are empty:
                  value:
                    error: One or more required fields empty
          description: When all fields are not filled
      security:
        - JWT: []
  '/poems/{id}':
    get:
      tags:
        - Poems
      parameters:
        - examples:
            path id:
              value: 638881e33508ee4fc4f693c4
          name: id
          description: Id of the poem
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                Poem by Id:
                  value:
                    status: success
                    data:
                      poem:
                        _id: 6387e62bed4cef5f75cd0032
                        userId: 6387de58b8ca994dcd8f9da2
                        title: Some poem title
                        text: >-
                          Lorem Ipsum is simply dummy text of the printing and
                          typesetting industry. Lorem Ipsum has been the industry's
                          standard dummy text ever since the 1500s
                        createdAt: '2022-11-30T23:24:26.543Z'
                        __v: 0
          description: Get poem by Id
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Un autorized:
                  value:
                    error: No authorization token not found
          description: Not authorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                Poem with given Id not found:
                  value:
                    error: Poem with given Id does not found
          description: Poem with given Id not found
      security:
        - JWT: []
    delete:
      tags:
        - Poems
      parameters:
        - examples:
            Path to id:
              value: 638881e33508ee4fc4f693c4
          name: id
          description: Id of the poem
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: Poem deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                User not authorized:
                  value:
                    error: No authorization token not found
          description: Not authorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                Poem not found:
                  value:
                    error: Poem with given Id not found
          description: Poem with given Id not found
      security:
        - JWT: []
    patch:
      tags:
        - Poems
      parameters:
        - examples:
            Id of the poem:
              value: 638881e33508ee4fc4f693c4
          name: id
          description: Id of the poem
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                Updated poem:
                  value:
                    status: success
                    data:
                      poem:
                        _id: 6387e62bed4cef5f75cd0032
                        userId: 6387de58b8ca994dcd8f9da2
                        title: new poem title newnew
                        text: >-
                          Lorem Ipsum is simply dummy text of the printing and
                          typesetting industry. Lorem Ipsum has been the industry's
                          standard dummy text ever since the 1500s
                        createdAt: '2022-11-30T23:24:26.543Z'
                        __v: 0
          description: Returns updated object
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                Unautorized:
                  value:
                    error: No authorization token not found
          description: Authorization token not found
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poem'
              examples:
                Poem not found:
                  value:
                    error: Poem with given Id not found
          description: Poem with given Id not found
      security:
        - JWT: []
    parameters:
      - examples:
          Path to id:
            value: '/poems/{id}'
        name: id
        description: Path to Id
        schema:
          type: string
        in: path
        required: true
  '/users/{id}':
    get:
      tags:
        - Users
      parameters:
        - examples:
            User Id:
              value: 6387de58b8ca994dcd8f9da2
          name: id
          description: Path id
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                'User ':
                  value:
                    status: success
                    data:
                      user:
                        _id: 6387de58b8ca994dcd8f9da2
                        email: bob@gmail.com
                        __v: 0
          description: User found
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                User not found:
                  value:
                    error: User with given Id does not exist
          description: User not found
      security:
        - JWT: []
    parameters:
      - examples:
          User Id:
            value: 6387de58b8ca994dcd8f9da2
        name: id
        description: Path id
        schema:
          type: string
        in: path
        required: true
  /users/getUsers:
    get:
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Returns users array:
                  value:
                    status: success
                    results: 5
                    data:
                      users:
                        - _id: 6387de58b8ca994dcd8f9da2
                          email: bob@gmail.com
                          __v: 0
                        - _id: 63893662a107eb6710f851c9
                          email: bob2@gmail.com
                          __v: 0
                        - _id: 638937a7a107eb6710f851d2
                          email: bob3@gmail.com
                          __v: 0
          description: Get users array
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              examples:
                Users not found error:
                  value:
                    error: Users not found
          description: Users not found
      security:
        - JWT: []
components:
  schemas:
    poem:
      title: Root Type for poem
      description: poem data
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            poems:
              type: object
              properties:
                createdAt:
                  format: date-time
                  type: string
                _id:
                  type: string
                userId:
                  type: string
                title:
                  type: string
                text:
                  type: string
      example:
        status: success
        data:
          poems:
            createdAt: '2022-11-29T19:47:06.659Z'
            _id: 638661e6553e8458717a9999
            userId: 6366eec1385c79a791f80ee9
            title: Some poem randome title
            text: some pome text
    users:
      title: Root Type for users
      description: guest can create user
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                _id:
                  type: string
                __v:
                  format: int32
                  type: integer
      example:
        message: User Created
        data:
          user:
            email: bob@gmail.com
            password: mikk12345
            _id: 638797603615634aa1991ef1
            __v: 0
  securitySchemes:
    JWT:
      scheme: bearer
      type: http
